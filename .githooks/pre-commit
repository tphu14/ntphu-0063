#!/usr/bin/env python

import platform
import os, re, subprocess, sys, stat
from datetime import datetime

LOG_FILE = "gitsecure.log"
SENSITIVE_PATTERNS = [
    r"apikey\s*=\s*['\"][A-Za-z0-9\-_]{16,}['\"]",     # API keys
    r"secret\s*=\s*['\"].{8,}['\"]",                   # generic secret
    r"password\s*=\s*['\"].{4,}['\"]",                 # password >= 4 chars
    r"token\s*=\s*['\"].{10,}['\"]",                   # tokens
    r"(AKIA|ASIA)[A-Z0-9]{16}"                         # AWS keys
]

def log(msg):
    with open(LOG_FILE, "a") as f:
        f.write(f"[{datetime.now()}] {msg}\n")

def scan_sensitive(file_path):
    try:
        with open(file_path, "r", errors="ignore") as f:
            content = f.read()
            for pattern in SENSITIVE_PATTERNS:
                if re.search(pattern, content, re.IGNORECASE):
                    return f"Sensitive info found in {file_path}: pattern {pattern}"
    except Exception:
        return None
    return None

def check_permissions(file_path):
    if platform.system() == "Windows":
        return False
    st = os.stat(file_path)
    if st.st_mode & stat.S_IWOTH:
        return f"File {file_path} is world-writable!"
    return None

def run_bandit():
    try:
        result = subprocess.run(["bandit", "-r", ".", "--exclude", "./.git"], capture_output=True, text=True)
        if "SEVERITY: High" in result.stdout:
            log("Bandit: High severity issues found.")
            return "Bandit: High severity issues found."
    except FileNotFoundError:
        return "Bandit not installed. Run: pip install bandit"
    return None

def main():
    findings = []
    files = subprocess.check_output(["git", "diff", "--staged", "--name-only"]).decode().splitlines()
    for file in files:
        if not os.path.isfile(file):
            continue
        result = scan_sensitive(file)
        if result:
            findings.append(result)
        perms = check_permissions(file)
        if perms:
            findings.append(perms)
    
    bandit_result = run_bandit()
    if bandit_result:
        findings.append(bandit_result)

    if findings:
        print("\nCOMMIT BLOCKED by GitSecure:")
        for f in findings:
            print(f"- {f}")
            log(f)
        sys.exit(1)
    else:
        print("GitSecure: All checks passed.")

if __name__ == "__main__":
    main()